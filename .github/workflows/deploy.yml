name: Extract CHM & Deploy to Netlify

on:
  push:
    branches: [ "main" ]
    paths:
      - "source/**"
      - "viewer/**"
      - "scripts/**"
      - ".github/workflows/deploy.yml"
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies (7zip, Python, chm tools)
        run: |
          sudo apt-get update
          sudo apt-get install -y p7zip-full python3 libchm-bin

      - name: Prepare publish directory
        run: |
          rm -rf publish
          mkdir -p publish

      - name: Extract CHM with multiple methods
        run: |
          # 先确认文件存在
          if [ ! -f "source/latest.chm" ]; then
            echo "source/latest.chm not found"; exit 1;
          fi
          
          # 保存原始大小
          ORIG_SIZE=$(stat -c%s "source/latest.chm")
          echo "CHM文件大小: $ORIG_SIZE 字节"
          
          # 方法1: 用7z解压
          mkdir -p publish/chm-content
          7z x source/latest.chm -opublish/chm-content
          
          # 检查结果
          CONTENT_COUNT=$(find publish/chm-content -type f | wc -l)
          echo "7z解压后文件数: $CONTENT_COUNT"
          
          # 如果没有内容文件，尝试方法2
          if [ "$CONTENT_COUNT" -lt 2 ]; then
            echo "7z解压失败，尝试用chmextract..."
            # 安装额外工具
            sudo apt-get install -y chm-utils 
            mkdir -p publish/chm-extract
            extract_chmLib source/latest.chm publish/chm-extract
            
            # 如果有内容，复制到主目录
            EXTRACT_COUNT=$(find publish/chm-extract -type f | wc -l)
            echo "chmextract解压后文件数: $EXTRACT_COUNT"
            if [ "$EXTRACT_COUNT" -gt 0 ]; then
              cp -r publish/chm-extract/* publish/chm-content/
            fi
          fi
          
          # 复制前端文件
          cp viewer/* publish/

      - name: Clean invalid files
        run: |
          echo "清理 #WINDOWS 等非法目录和文件..."
          find publish -type d -name '#WINDOWS' -exec rm -rf {} +
          find publish -type f \( -name '*#*' -o -name '*?*' \) -delete

      - name: Generate toc.json (recursive)
        run: |
          python3 scripts/hhc_to_json.py publish

      - name: Debug toc.json
        run: |
          echo "== 详细分析 toc.json =="
          ls -la publish/
          cat publish/toc.json
          echo "== 查看HTML文件数量 =="
          find publish -name "*.html" | wc -l
          find publish -name "*.htm" | wc -l

      - name: Copy viewer assets
        run: |
          cp -r viewer/* publish/

      - name: Show publish tree (for debugging)
        run: |
          echo "== PUBLISH TREE =="
          (command -v tree && tree -a publish || find publish -maxdepth 3 -type f | sed 's|^| - |')
          echo "== HEAD of toc.json =="
          head -n 50 publish/toc.json || true

      - name: Setup Node (for Netlify CLI)
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Netlify CLI
        run: npm install -g netlify-cli

      - name: Deploy to Netlify (Production)
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        run: |
          netlify deploy \
            --dir=publish \
            --prod \
            --site="$NETLIFY_SITE_ID"
            
      - name: Super Debug
        run: |
          echo "==== CHM 文件信息 ===="
          ls -la source/latest.chm
          file source/latest.chm
          
          echo "==== 解压目录内容 ===="
          ls -la publish/
          
          echo "==== HTML 文件列表 ===="
          find publish -name "*.html" -o -name "*.htm" | head -n 20
          
          echo "==== 文件总数统计 ===="
          find publish -type f | wc -l
          echo "HTML 文件数:"
          find publish -name "*.html" -o -name "*.htm" | wc -l
          
          echo "==== 尝试直接查看一个 HTML 文件 ===="
          FIRST_HTML=$(find publish -name "*.html" -o -name "*.htm" | head -n 1)
          if [ -n "$FIRST_HTML" ]; then
            echo "找到 HTML: $FIRST_HTML"
            head -n 20 "$FIRST_HTML" || cat "$FIRST_HTML" | head -n 20
          else
            echo "未找到任何 HTML 文件!"
          fi
          
      - name: Inspect chm-content
        run: |
          echo "==== CHM-CONTENT 目录结构 ===="
          find publish/chm-content -type f | sort
          echo "==== CHM-CONTENT 文件类型 ===="
          find publish/chm-content -type f -exec file {} \; | head -n 20

      - name: Create Directory Browser
        run: |
          # 创建文件浏览器
          cat > publish/browser.php << 'EOF'
          <?php
          $dir = isset($_GET['dir']) ? $_GET['dir'] : '.';
          $dir = realpath('./chm-content/' . $dir);
          
          // 安全检查：确保只能浏览 chm-content 目录
          if (!$dir || strpos($dir, realpath('./chm-content')) !== 0) {
              $dir = realpath('./chm-content');
          }
          
          echo '<html><head><title>CHM Browser</title>';
          echo '<style>body{font-family:sans-serif;max-width:1000px;margin:0 auto;padding:20px}';
          echo 'h1{color:#333}ul{list-style:none;padding:0}li{padding:5px;border-bottom:1px solid #eee}';
          echo 'a{text-decoration:none;color:#0066cc}a:hover{text-decoration:underline}</style></head>';
          echo '<body><h1>CHM Content Browser</h1>';
          
          // 显示当前路径
          $rel_path = substr($dir, strlen(realpath('./chm-content')));
          $rel_path = $rel_path ? $rel_path : '/';
          echo "<p>当前路径: <b>$rel_path</b></p>";
          
          // 显示上级目录链接
          if ($dir != realpath('./chm-content')) {
              $parent = dirname($rel_path);
              $parent = $parent == '/' ? '' : $parent;
              echo "<p><a href='?dir=$parent'>⬆️ 返回上级目录</a></p>";
          }
          
          echo '<ul>';
          // 显示目录
          $items = scandir($dir);
          foreach ($items as $item) {
              if ($item == '.' || $item == '..') continue;
              
              $full_path = $dir . '/' . $item;
              $item_path = $rel_path == '/' ? $item : $rel_path . '/' . $item;
              
              if (is_dir($full_path)) {
                  echo "<li>📁 <a href='?dir=$item_path'>$item/</a></li>";
              } else {
                  $file_url = 'chm-content' . $item_path;
                  echo "<li>📄 <a href='$file_url' target='_blank'>$item</a></li>";
              }
          }
          echo '</ul></body></html>';
          EOF
          
          # 创建一个兼容的静态版本
          cat > publish/browser.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
            <meta charset="utf-8">
            <title>CHM 内容浏览器</title>
            <style>
              body { font-family: system-ui, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
              h1 { color: #333; }
              .note { background: #f8f9fa; padding: 10px; border-left: 4px solid #0066cc; }
              pre { background: #f1f1f1; padding: 10px; overflow: auto; }
            </style>
          </head>
          <body>
            <h1>CHM 内容浏览器</h1>
            
            <div class="note">
              <p>这个 CHM 文件解压后的目录结构如下:</p>
            </div>
            
            <pre>
          publish/chm-content/
          ├── $WWAssociativeLinks/
          ├── $WWKeywordLinks/
          └── cppreference.com
            </pre>
            
            <p>目录内容可能是 <code>cppreference.com</code> 或包含在 <code>$WWKeywordLinks</code> 子目录中。</p>
            
            <p>建议:</p>
            <ol>
              <li>尝试打开 <a href="chm-content/cppreference.com" target="_blank">cppreference.com</a> 文件</li>
              <li>如果是目录，请检查 GitHub Actions 日志获取更多信息</li>
              <li>考虑提供一个标准格式的 CHM 文件进行测试</li>
            </ol>
          </body>
          </html>
          EOF
          
          # 更新主页链接到浏览器
          sed -i 's/<nav id="toc"><\/nav>/<nav id="toc"><p><a href="browser.html" target="viewer">浏览 CHM 原始内容<\/a><\/p><\/nav>/' publish/index.html
